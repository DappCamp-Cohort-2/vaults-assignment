/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Vault1, Vault1Interface } from "../Vault1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109ca3803806109ca8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b6108bc8061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806327e235e3146100465780632e1a7d4d14610076578063b6b55f2514610092575b600080fd5b610060600480360381019061005b919061048b565b6100ae565b60405161006d919061064d565b60405180910390f35b610090600480360381019061008b91906104dd565b6100c6565b005b6100ac60048036038101906100a791906104dd565b6102c9565b005b60016020528060005260406000206000915090505481565b60008111610109576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101009061060d565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561018b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610182906105ed565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016101e69291906105c4565b602060405180830381600087803b15801561020057600080fd5b505af1158015610214573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023891906104b4565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028891906106cf565b925050819055507f430648de173157e069201c943adb2d4e340e7cf5b27b1b09c9cb852f03d63b56816040516102be919061064d565b60405180910390a150565b6000811161030c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103039061062d565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103699392919061058d565b602060405180830381600087803b15801561038357600080fd5b505af1158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb91906104b4565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461040b9190610679565b925050819055507f2a89b2e3d580398d6dc2db5e0f336b52602bbaa51afa9bb5cdf59239cf0d2bea81604051610441919061064d565b60405180910390a150565b60008135905061045b81610841565b92915050565b60008151905061047081610858565b92915050565b6000813590506104858161086f565b92915050565b60006020828403121561049d57600080fd5b60006104ab8482850161044c565b91505092915050565b6000602082840312156104c657600080fd5b60006104d484828501610461565b91505092915050565b6000602082840312156104ef57600080fd5b60006104fd84828501610476565b91505092915050565b61050f81610703565b82525050565b6000610522601483610668565b915061052d8261077a565b602082019050919050565b6000610545602f83610668565b9150610550826107a3565b604082019050919050565b6000610568602e83610668565b9150610573826107f2565b604082019050919050565b61058781610741565b82525050565b60006060820190506105a26000830186610506565b6105af6020830185610506565b6105bc604083018461057e565b949350505050565b60006040820190506105d96000830185610506565b6105e6602083018461057e565b9392505050565b6000602082019050818103600083015261060681610515565b9050919050565b6000602082019050818103600083015261062681610538565b9050919050565b600060208201905081810360008301526106468161055b565b9050919050565b6000602082019050610662600083018461057e565b92915050565b600082825260208201905092915050565b600061068482610741565b915061068f83610741565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106c4576106c361074b565b5b828201905092915050565b60006106da82610741565b91506106e583610741565b9250828210156106f8576106f761074b565b5b828203905092915050565b600061070e82610721565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b7f496e76616c696420776974686472617720616d6f756e742c206d75737420626560008201527f2067726561746572207468616e20300000000000000000000000000000000000602082015250565b7f496e76616c6964206465706f73697420616d6f756e742c206d7573742062652060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b61084a81610703565b811461085557600080fd5b50565b61086181610715565b811461086c57600080fd5b50565b61087881610741565b811461088357600080fd5b5056fea2646970667358221220395e9f88fa3adba3f290e7d2d770ed071157b6a353028d17080d4e1d372c54ea64736f6c63430008040033";

type Vault1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Vault1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault1__factory extends ContractFactory {
  constructor(...args: Vault1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Vault1";
  }

  deploy(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Vault1> {
    return super.deploy(_tokenAddress, overrides || {}) as Promise<Vault1>;
  }
  getDeployTransaction(
    _tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenAddress, overrides || {});
  }
  attach(address: string): Vault1 {
    return super.attach(address) as Vault1;
  }
  connect(signer: Signer): Vault1__factory {
    return super.connect(signer) as Vault1__factory;
  }
  static readonly contractName: "Vault1";
  public readonly contractName: "Vault1";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Vault1Interface {
    return new utils.Interface(_abi) as Vault1Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault1 {
    return new Contract(address, _abi, signerOrProvider) as Vault1;
  }
}
